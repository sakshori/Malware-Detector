import os
import re
import sys
import json
os_path = os.path.dirname(os.path.realpath(__file__))
try :  target_path = sys.argv[1]
except: target_path = 'website-682886\www.joncomet.com\web\content'
if target_path == ' ' : target_path = 'website-682886\www.joncomet.com\web\content'

try: target_extension = eval(sys.argv[2])
except: target_extension = None

class malware_detector:
    def __init__(self,target_path,target_extensions=None):
        file_list = self.recursive_ls(target_path)        
        target_files = self.get_extensions(file_list)
        self.target_files = {}
        if target_extensions != None:
            if type(target_extensions) == str : target_extensions = [target_extensions]
            for key in target_files.keys():
                if key in target_extensions : self.target_files[key] = target_files[key]

        else: self.target_files = target_files
        self.target_path = target_path
        self.read_files()
        self.write_results()

    def recursive_ls(self,target_path):
        all_files = []
        for file_name in os.listdir(target_path):
            if file_name[0] != '.' and '.' in file_name:
                all_files.append(file_name)

            else:
                try:
                    if len(os.listdir('{}/{}'.format(target_path,file_name))) > 0:
                        for sub_dir_file_name in self.recursive_ls('{}/{}'.format(target_path,file_name)):
                            all_files.append('{}/{}'.format(file_name,sub_dir_file_name))
                except: ''
        
        return(all_files)

    def get_extensions(self,target_files):
        target_extension_list = {}
        for file_name in target_files:
            extension = file_name.split('.')[::-1][0].lower()
            if extension in ['woff','ttf','otf','woff2','eot']: extension = 'font'
            elif extension in ['json','md']: extension = 'txt'
            else: extension = extension.replace('ini','php').replace('jsx','js')

            if extension not in target_extension_list.keys():
                target_extension_list[extension] = []

            target_extension_list[extension].append(file_name)

        return(target_extension_list)

    def analyze_suspicious(self,file_contents,key):
        if re.findall(r'\$[0Oo]+[{=]',file_contents): return(True)
        if re.findall(r'\$=\$.',file_contents) : return(True)
        if re.findall(r'base64_decode[\s\(]',file_contents) : return(True)
        if re.findall(r'/\[a-z0-9]+\/',file_contents) : return(True) #/6g33/ pattern 
        if re.findall(r'eval[\s\(]',file_contents) : return(True)
        if re.findall(r'^[A-Za-z0-9]+$',file_contents) : return(True) #Jumbled letters and numbers only in the entire line
        if re.findall(r'my_sucuri_encoding',file_contents) : return(True) # Legit sucuri file that look slike bad file
        if re.findall(r'\'.\'=>\'.\'',file_contents) : return(True) # Array map obfus
        if re.findall(r'chr\([0-9]+\)',file_contents) : return(True)# int to ascii
        if re.findall(r'gzinflate[\s\(]',file_contents) : return(True)# int to ascii
        if re.findall(r'\$[li]+[{=]',file_contents) : return(True)


        if key in ['txt','php']:
            if re.findall(r'this is a text string',file_contents): return(True)
        
        if key not in ['sh']:
            if re.findall(r'/\[a-z0-9]+\/',file_contents) : return(True) #/6g33/ pattern 

    def read_files(self):
        self.suspicious_files  = []
        known_functions = ['php','txt']
        for key in self.target_files:
            if key in known_functions:
                for file_name in self.target_files[key]:
                    try: 
                        file_contents = open('{}/{}'.format(target_path,file_name),'rb').read().decode('utf-8')
                        if self.analyze_suspicious(file_contents,key) == True: self.suspicious_files.append(file_name)
                    except:
                        print(file_name,'could not be opened for reading')
        
    def write_results(self):
        open('{}/suspicious_files'.format(os_path),'w').write('Files Identified {}\n'.format(len(self.suspicious_files)))
        self.suspicious_files[0] = 'website-682886/www.joncomet.com/web/content/{}'.format(self.suspicious_files[0]) #add target path to first entry and join rest in next line
        open('{}/suspicious_files'.format(os_path),'a+').write('\n{}/'.format(self.target_path).join(self.suspicious_files).replace('\\','/'))
        if len(self.suspicious_files) > 0 :
            self.suspicious_files[0] ='{}/{}'.format(self.target_path,self.suspicious_files[0]) 
                       

b = malware_detector(target_path,target_extensions=target_extension)
#open('{}/{}'.format({os_path},test),'w').write(json.dumps(b.suspicious_files))